rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
setwd("D:/work/corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$month_day <- paste(day(df$Day) , months.Date(df$Day) )
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
datatable(df,rownames = FALSE)
ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
?dmy
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
setwd("D:/work/corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$month_day <- paste(day(df$Day) , months.Date(df$Day) )
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(lubridate)
datatable(df,rownames = FALSE)
ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
View(df)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(lubridate)
setwd("D:/work/corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$month_day <- paste(day(df$Day) , months.Date(df$Day) )
ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
g <- ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
g <- ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
g
g <- ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
print(g)
g <- ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
print(g)
f <- function(df) {
gg <- ggplotly(ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1)))
list( result=df, plot=plotly::ggplotly(gg) )
}
res <- f(df)
res$plot
f <- function(df) {
gg <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
list( result=df, plot=plotly::ggplotly(gg) )
}
res <- f(df)
res$plot
f1 <- function(df) {
gg <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
assign("ggp", plotly::ggplotly(gg), envir=parent.frame())
df    # NOT returning a plot
}
res1 <- f1(df)
ggp
f1 <- function(df) {
gg <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
assign("ggp", plotly::ggplotly(gg), envir=parent.frame())
df    # NOT returning a plot
}
res1 <- f1(df)
ggp
py <- plotly(username="r_user_guide", key="mw5isa4yqp")
bar <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
py$ggplotly(bar)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(lubridate)
setwd("D:/work/corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$month_day <- paste(day(df$Day) , months.Date(df$Day) )
datatable(df,rownames = FALSE)
py <- plotly(username="r_user_guide", key="mw5isa4yqp")
bar <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
py$ggplotly(bar)
bar <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
bar
bar <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
ggplotly(bar)
ggplotly(bar)
sessionInfo()
library(plotly)
mh <- data.frame(
rank = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
43, 44, 45, 46, 47, 48, 49, 50, 51),
state = c("CT", "MA", "VT", "SD", "MN", "NJ", "IA", "ND", "PA", "ME",
"DE", "NY", "AK", "MD", "IL", "HI", "MI", "DC",
"KY", "NH", "KS", "NM", "CA", "OK", "CO", "OH",
"NE", "FL", "WY", "WA", "MO", "TX", "NC", "GA",
"WI", "RI", "SC", "VA", "MT", "UT", "TN", "LA",
"WV", "MS", "IN", "AL", "AR", "ID", "OR", "AZ",
"NV")
)
plot_ly(
type = "choropleth",
locations = mh$state,
locationmode = "USA-states",
z = mh$rank
) %>%
layout(geo = list(scope = "usa"))
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(knitr)
library(lubridate)
setwd("D:/work/corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$month_day <- paste(day(df$Day) , months.Date(df$Day) )
bar <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
plot_ly(bar)
plot_ly(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
plot_ly(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
g <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
print(ggplotly(g))
plot_ly()
plot_ly(x = 1:10, y = 1:10)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, text = ~paste("Clarity: ", clarity),
mode = "markers", color = ~carat, size = ~carat, marker = list(line = list(color = "black")))
plot_ly()
plot_ly(x = 1:10, y = 1:10)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, text = ~paste("Clarity: ", clarity),
mode = "markers", color = ~carat, size = ~carat, marker = list(line = list(color = "black")))
plot_ly(d, x = ~carat, y = ~price, text = ~paste("Clarity: ", clarity),
mode = "markers", color = ~carat, size = ~carat, marker = list(line = list(color = "black")))
lot_ly(x = 1:10, y = 1:10)
plot_ly(x = 1:10, y = 1:10)
library(plotly)
packageVersion('plotly')
#[1] ‘4.6.0’
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
update.packages("plotly")
library("plotly", lib.loc="~/R/win-library/3.6")
library(plotly)
packageVersion('plotly')
#[1] ‘4.6.0’
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
library(plotly)
packageVersion('plotly')
#[1] ‘4.6.0’
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
g <- ggplot(df, aes(x=month_day, y=New.Cases)) +
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 70, hjust = 1))
print(ggplotly(g))
?ggplotly()
ggiris <- qplot(Petal.Width, Sepal.Length, data = iris, color = Species)
ggplotly(ggiris)
ggiris
install.packages("janitor")
install.packages("janitor")
install.packages("janitor")
install.packages("janitor")
install.packages("janitor")
install.packages("janitor")
library(tidyverse)
install.packages("janitor")
install.packages("janitor")
update.packages("tidyselect")
install.packages("tidyselect")
install.packages("tidyselect")
library(tidyverse)
library(stringr)
library(lubridate)
new_data1 <- read.csv("D:/work/job/new_data1.csv")
##1- Right User
##Enhance customer profile to include user's interests rather than just demographics
##Personalized Targeted marketing
User_level <- new_data1 %>%
group_by(MAID,App)%>%
mutate(
No_of_sessions = n())%>%
arrange(desc(No_of_sessions))%>%
mutate(Top_used_App = nth(App,1))%>%
ungroup()%>%
group_by(MAID)%>%
summarise(
No_of_sessions = first(No_of_sessions),
Top_used_App = first(Top_used_App),
No_of_used_apps = n_distinct(AppName),
No_of_categories = n_distinct(Category),
distinct_categories = str_c(str_sort(unique(Category)), collapse = ", "),
No_of_Genres = n_distinct(Genres),
distinct_Genres = str_c(str_sort(unique(Genres)), collapse = ", "))
##2- Right platform
##Enhance app profile to better match ads on relevant applications
App_level <- new_data1 %>%
group_by(App,Timestamp,Category,Genres)%>%
summarise(
No_of_sessions = n(), # we can add peak time for each app too
No_of_concurrent_users = n_distinct(MAID), #reach
No_of_concurrent_cities = n_distinct(City), #spread
No_of_concurrent_states = n_distinct(state) #spread
)
##3- Right Time
##Enhance time of targeting based on peak demand times
Timestamp_level <- new_data1 %>%
group_by(Timestamp)%>%
summarise(
No_of_concurrent_users = n_distinct(MAID),
No_of_concurrent_cities = n_distinct(City)  )
x <- new_data1$Timestamp
bw <- 2 * IQR(x) / length(x)^(1/3)
### for example #####
ggplot() + geom_histogram(aes(x), binwidth = bw)
page <- read_html("https://www.nbe.com.eg/NBE/E/#/EN/ATMBranch")
library(xml2)
library(rvest)
library(stringr)
page <- read_html("https://www.nbe.com.eg/NBE/E/#/EN/ATMBranch")
values <- page%>% html_nodes("[class='atm-res ATMBranchSearchListItem']")%>%html_text()
values
page
page%>% html_nodes("[class='atm-res ATMBranchSearchListItem']")
page%>% html_nodes("[class='gold-txt-1']")
page <- read_html("https://www.nbe.com.eg/NBE/E/#/EN/ATMBranch")
as.character(page)
read_html("D:/National Bank of Egypt - ATM and branches")
read_html("D:/National Bank of Egypt - ATM and branches.html")
page <- read_html("D:/National Bank of Egypt - ATM and branches.html")
page%>% html_nodes("[class='gold-txt-1']")%>%html_text()
page%>% html_nodes("[class='atm-res ATMBranchSearchListItem']")%>%html_text()
values <- page%>% html_nodes("[class='atm-res ATMBranchSearchListItem']")%>%html_text()
values[1]
trimws(values[1])
trimws(values[1:5])
names(new_data1)
is.unsorted(new_data1$MAID)
is.unsorted(new_data1$Timestamp)
is.unsorted(new_data1)
is.unsorted(new_data1[:,1:5])
new_data1[:,1:5]
new_data1[,1:5]
is.unsorted(new_data1[,1:5])
as.vector(new_data1[,1:5])
as.vector(new_data1[,1])
is.unsorted(new_data1[,1])
for(i in 1:5){is.unsorted(new_data1[,i])}
for(i in 1:5){print(is.unsorted(new_data1[,i]))}
for(i in 1:10){print(is.unsorted(new_data1[,i]))}
plot(new_data1$Timestamp[1:100])
plot(new_data1$Timestamp[1:200])
Sys.time()-10:Sys.time()
Sys.time()-10
library(lubridate)
ymd_hms(Sys.time())
ymd_hms(Sys.time())-lubridate::hours(1)
ymd_hms(Sys.time()): (ymd_hms(Sys.time())-lubridate::hours(1))
plot( (ymd_hms(Sys.time())-lubridate::hours(1)) - ymd_hms(Sys.time()))
plot( (ymd_hms(Sys.time())-lubridate::hours(1)) : ymd_hms(Sys.time()))
plot( (ymd_hms(Sys.time())-lubridate::minutes(1)) : ymd_hms(Sys.time()))
plot( (ymd_hms(Sys.time())-lubridate::minutes(3)) : ymd_hms(Sys.time()))
is.unsorted( (ymd_hms(Sys.time())-lubridate::minutes(3)) : ymd_hms(Sys.time()))
is.unsorted( (ymd_hms(Sys.time())-lubridate::hours(2)) : ymd_hms(Sys.time()))
ymd_hms(new_data1$Timestamp[1:100])
mdy_hms(new_data1$Timestamp[1:100])
ymd_hms(Sys.time())-lubridate::minutes(3))
ymd_hms(Sys.time())-lubridate::minutes(3)
ymd_hms(Sys.time())-lubridate::minutes(1)) : ymd_hms(Sys.time())
ymd_hms(Sys.time())-lubridate::minutes(1)) : ymd_hms(Sys.time()
ymd_hms(Sys.time())-lubridate::minutes(1)) : ymd_hms(Sys.time())
ymd_hms(Sys.time()-lubridate::minutes(1)) : ymd_hms(Sys.time())
tt <- ymd_hms(Sys.time()-lubridate::minutes(1)) : ymd_hms(Sys.time())
new_data1$Timestamp[1]
as.character(new_data1$Timestamp[1])
ymd_hms(new_data1$Timestamp[1]/100)
ymd_hms(new_data1$Timestamp[1]/1000)
typeof(new_data1$Timestamp[1]/1000)
typeof(tt[1])
ymd_hms(as.integer(new_data1$Timestamp[1]/1000))
as.integer(new_data1$Timestamp[1]/1000)
tt[]
tt[1]
as.integer(new_data1$Timestamp[1]/1000)
ydm_hms(new_data1$Timestamp[1]/1000)
?amytime
?anytime
??anytime
install.packages("anytime")
library(anytime)
anytime(new_data1$Timestamp[1]/1000)
anytime(new_data1$Timestamp[1]/100)
anytime(new_data1$Timestamp[1])
length(unique(anytime(new_data1$Timestamp/1000)))
plot(anytime(new_data1$Timestamp/1000))
plot(anytime(new_data1$Timestamp[1:100]/1000))
unique(seconds(anytime(new_data1$Timestamp[1:100]/1000)))
unique(minutes(anytime(new_data1$Timestamp[1:100]/1000)))
unique(minute(anytime(new_data1$Timestamp[1:100]/1000)))
unique(second(anytime(new_data1$Timestamp[1:100]/1000)))
unique(as.integer(second(anytime(new_data1$Timestamp[1:100]/1000))))
new_data1 %>% group_by(as.integer(second(anytime(Timestamp/1000)))) %>% summarise(n())
unique(as.integer(second(anytime(new_data1$Timestamp/1000))))
plot(anytime(new_data1$Timestamp[1:700]/1000))
unique(as.integer(minute(anytime(new_data1$Timestamp/1000))))
new_data1 %>% group_by(as.integer(minute(anytime(Timestamp/1000)))) %>% summarise(n())
new_data1 %>% group_by(as.integer(minute(anytime(Timestamp/1000))) , as.integer(second(anytime(Timestamp/1000)))) %>% summarise(n())
data.frame(new_data1 %>% group_by(as.integer(minute(anytime(Timestamp/1000))) , as.integer(second(anytime(Timestamp/1000)))) %>% summarise(n()))
new_data1 %>% group_by(Timestamp) %>% summarise(n=n())
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% filter( min_rank(desc(n)) <= 5 )
new_data1 %>% group_by(Timestamp) %>% summarise(n=n())["n"]
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()$n
)
new_data1 %>% group_by(Timestamp) %>% summarise(n=n())$n
data.frame(new_data1 %>% group_by(Timestamp) %>% summarise(n=n()))$n
unique(data.frame(new_data1 %>% group_by(Timestamp) %>% summarise(n=n()))$n)
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% desc(n)
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% min_rank(desc(n))
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% top_n(n)
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% top_n(n,5)
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% top_n()
new_data1 %>% group_by(Timestamp) %>% summarise(n=n()) %>% top_n(n)
new_data1 %>% group_by(as.integer(minute(anytime(Timestamp/1000))) , as.integer(second(anytime(Timestamp/1000)))) %>% summarise(n = n()) %>% top_n(n)
new_data1 %>% group_by(as.integer(minute(anytime(Timestamp/1000))) , as.integer(second(anytime(Timestamp/1000)))) %>% summarise(n = n())
new_data1 %>% group_by(as.integer(minute(anytime(Timestamp/1000))) , as.integer(second(anytime(Timestamp/1000)))) %>% summarise(n = n()) %>% top_n(n)
names(new_data1)
new_df <- read.csv("D:/work/job/new_data1.csv")
new_df$MAID <- tolower(new_df$MAID)
for(i in names(new_df)){
print(paste(i , length(unique(new_df[,i]))))
}
?dummy
??dummy
source('D:/work/git corona/run_file.R', echo=TRUE)
View(df)
rmarkdown::render(input = "Corona.Rmd", output_file = "index.html")
new_data1 <- read.csv("D:/work/job/new_data1.csv")
unique((minute(anytime(new_data1$
Timestamp/1000)))
)
unique((minute(anytime(new_data1$Timestamp/1000)))
)
unique((minute(anytime(new_data1$Timestamp/1000))))
unique((hour(anytime(new_data1$Timestamp/1000))))
unique((day(anytime(new_data1$Timestamp/1000))))
data.frame
(anytime(new_data1$Timestamp/1000))
data.frame(anytime(new_data1$Timestamp/1000)) %>% write.csv("D:/work/job/Time.csv" , row.names = F)
data.frame(anytime(new_data1$Timestamp/1000)) -> time
time[1]-time[2]
time[1]
time[1,]
time[1,]-time[2,]
as.character(time[1,])
strptime(time[1,],"%Y-%m-%d %H:%M:%OS")
op <- options(digits.secs=3)
strptime(time[1,],"%Y-%m-%d %H:%M:%OS")
strptime(time[3,],"%Y-%m-%d %H:%M:%OS")
time <- strptime(time,"%Y-%m-%d %H:%M:%OS")
write.csv(time , "D:/work/job/Time.csv" , row.names = F)
time
data.frame(anytime(new_data1$Timestamp/1000)) -> time
strptime(time,"%Y-%m-%d %H:%M:%OS")
strptime(time[1,],"%Y-%m-%d %H:%M:%OS")
strptime(time$anytime.new_data1.Timestamp.1000.,"%Y-%m-%d %H:%M:%OS")
time$anytime.new_data1.Timestamp.1000. <- strptime(time$anytime.new_data1.Timestamp.1000.,"%Y-%m-%d %H:%M:%OS")
write.csv(time , "D:/work/job/Time.csv" , row.names = F)
length(unique(strptime(time$anytime.new_data1.Timestamp.1000.,"%Y-%m-%d %H:%M:%OS")))
View(df)
View(new_data1)
length(unique(new_data1$Timestamp))
new_data1$tss <- as.POSIXct(new_data1$Timestamp/1000, origin="1970-01-01")
length(unique(new_data1$tss))
max(new_data1$tss)
min(new_data1$tss)
length(unique(second(new_data1$tss)))
length(unique(minute(new_data1$tss)))
length(unique(hour(new_data1$tss)))
length(unique(day(new_data1$tss)))
glm(data = df , formula = Day~New.Cases , family = binomial())
glm(data = df , formula = Day~New.Cases , family = binomial)
m <- glm(data = df , formula = Day~New.Cases , family = binomial)
timevalues <- seq(0, 30, 0.1)
predict(m,list(Time=timevalues))
lines(timevalues , predict(m,list(Time=timevalues)))
lines(timevalues , predict(m,list(Time=timevalues)),lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
timevalues <- seq(0, 32, 0.1)
timevalues <- seq(0, 33, 0.1)
lines(timevalues , predict(m,list(Time=timevalues)),lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
predict(m,list(Time=timevalues))
lines(timevalues , predict(m,list(Time=timevalues)),lwd=2, col = "red", xlab = "Time (s)", ylab = "Counts")
length(timevalues)
install.packages("devtools")
devtools::install_github("cardiomoon/ggiraphExtra")
install.packages("devtools")
install.packages("devtools")
?ggPredict
??ggPredict
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
rm(list = ls(all = TRUE))
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
lapply(names(sessionInfo()$loadedOnly), require, character.only = TRUE)
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE, force=TRUE))
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("glue")
install.packages("devtools")
install.packages("glue")
install.packages("glue")
install.packages("devtools")
install.packages("devtools")
install.packages("usethis")
install.packages("usethis")
install.packages("devtools")
install.packages("devtools")
install.packages("rlang")
install.packages("rlang")
update.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
