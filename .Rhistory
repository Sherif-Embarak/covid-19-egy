geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
chart10 <- ggplotly(ggplot(data=hk, aes(x=Day, y=closed_curve, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
hk2 <- highlight_key(df[15:nrow(df),], ~Total.Cases)
rate_of_death <- rate_of_death[15:nrow(df)]
chart11 <- ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+scale_y_continuous(labels = scales::percent_format(accuracy = 1))
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_discrete(labels = scales::percent_format(accuracy = 1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
str(rate_of_death)
rate_of_death <- (AllDF$Total.Deaths / (AllDF$Total.Deaths+AllDF$Total.Recovered))*100
round(rate_of_death , 2)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(knitr)
library(lubridate)
library(crosstalk)
library(scales)
setwd("D:/work/git corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$AccDay <- df$Day
df$Day <- paste(day(df$Day) , months.Date(df$Day) )
df$Curfew <- as.character(df$Curfew)
df$index <- as.numeric(rownames(df))
########################################################################
#weekly summary
AllDF <- df
shift <- 4
summary_AllDF <- data.frame(AllDF %>% mutate(week = ((as.numeric(AccDay)+shift) %/% 7) - ((as.numeric(min(AccDay))+shift) %/% 7)) %>%
group_by(week) %>%
summarise(number_of_days= table(week), from = min(AccDay) , to = max(AccDay), sum(New.Cases) , sum(New.Deaths), sum(New.Recovered)))
summary_AllDF$number_of_days <- as.integer(summary_AllDF$number_of_days)
########################################################################
df <- df[,c(1:8,12)]
attach(df)
next_day <- max(index)+1
nd_new_case <-as.integer(exp(predict(glm(New.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_deaths <-as.integer(exp(predict(glm(New.Deaths+0.01~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_recoverd <-as.integer(exp(predict(glm(New.Recovered+0.01~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
total_cases <- df$Total.Cases[nrow(df)]
total_deaths <- df$Total.Deaths[nrow(df)]
total_recovered <- df$Total.Recovered[nrow(df)]
closed <- total_deaths+total_recovered
closed_curve <- AllDF$New.Deaths + AllDF$New.Recovered
active <- total_cases - closed
df$Day <- factor(df$Day, levels = df$Day)
xlabel <- df$Day[as.integer(seq(1 , nrow(df) , length.out = 10))]
rate_of_death <- (AllDF$Total.Deaths / (AllDF$Total.Deaths+AllDF$Total.Recovered))*100
rate_of_death <- round(rate_of_death , 2)
hk <- highlight_key(df, ~Total.Cases)
chart1 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Cases)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=New.Cases), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_case ),
x=10,
y=max(New.Cases)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart2 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Deaths)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=New.Deaths+0.01), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_deaths ),
x=10,
y=max(New.Deaths)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart3 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Recovered)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(data = hk, aes(x=index, y=New.Recovered+0.01), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_recoverd ),
x=10,
y=max(New.Recovered)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart4 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Cases, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#33CCFF", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#33CCFF"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart5 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Deaths, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#FF9900", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#FF9900"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart6 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Recovered, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
chart10 <- ggplotly(ggplot(data=hk, aes(x=Day, y=closed_curve, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
hk2 <- highlight_key(df[15:nrow(df),], ~Total.Cases)
rate_of_death <- rate_of_death[15:nrow(df)]
chart11 <- ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 0.01))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 5L))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+scale_y_continuous(labels = scales::percent_format())+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
source('D:/work/git corona/run_file.R', echo=TRUE)
rw$Day <- format(Sys.Date()-1,"%m/%d/%Y")
source('D:/work/git corona/run_file.R', echo=TRUE)
rmarkdown::render(input = "Corona.Rmd", output_file = "index.html")
source('D:/work/git corona/run_file.R', echo=TRUE)
source('D:/work/git corona/run_file.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(knitr)
library(lubridate)
library(crosstalk)
library(scales)
setwd("D:/work/git corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$AccDay <- df$Day
df$Day <- paste(day(df$Day) , months.Date(df$Day) )
df$Curfew <- as.character(df$Curfew)
df$index <- as.numeric(rownames(df))
########################################################################
#weekly summary
AllDF <- df
shift <- 4
summary_AllDF <- data.frame(AllDF %>% mutate(week = ((as.numeric(AccDay)+shift) %/% 7) - ((as.numeric(min(AccDay))+shift) %/% 7)) %>%
group_by(week) %>%
summarise(number_of_days= table(week), from = min(AccDay) , to = max(AccDay), sum(New.Cases) , sum(New.Deaths), sum(New.Recovered)))
summary_AllDF$number_of_days <- as.integer(summary_AllDF$number_of_days)
########################################################################
df <- df[,c(1:8,12)]
attach(df)
next_day <- max(index)+1
nd_new_case <-as.integer(exp(predict(glm(New.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_deaths <-as.integer(exp(predict(glm(New.Deaths+0.01~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_recoverd <-as.integer(exp(predict(glm(New.Recovered+0.01~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
total_cases <- df$Total.Cases[nrow(df)]
total_deaths <- df$Total.Deaths[nrow(df)]
total_recovered <- df$Total.Recovered[nrow(df)]
closed <- total_deaths+total_recovered
closed_curve <- AllDF$New.Deaths + AllDF$New.Recovered
active <- total_cases - closed
df$Day <- factor(df$Day, levels = df$Day)
xlabel <- df$Day[as.integer(seq(1 , nrow(df) , length.out = 10))]
rate_of_death <- (AllDF$Total.Deaths / (AllDF$Total.Deaths+AllDF$Total.Recovered))*100
rate_of_death <- round(rate_of_death , 2)
hk <- highlight_key(df, ~Total.Cases)
chart1 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Cases)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=New.Cases), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_case ),
x=10,
y=max(New.Cases)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart2 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Deaths)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=New.Deaths+0.01), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_deaths ),
x=10,
y=max(New.Deaths)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart3 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Recovered)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(data = hk, aes(x=index, y=New.Recovered+0.01), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_recoverd ),
x=10,
y=max(New.Recovered)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart4 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Cases, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#33CCFF", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#33CCFF"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart5 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Deaths, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#FF9900", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#FF9900"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart6 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Recovered, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
chart10 <- ggplotly(ggplot(data=hk, aes(x=Day, y=closed_curve, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
hk2 <- highlight_key(df[15:nrow(df),], ~Total.Cases)
rate_of_death <- rate_of_death[15:nrow(df)]
chart11 <- ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(hk, aes(x=Day, y=New.Cases)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=New.Cases), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_case ),
x=10,
y=max(New.Cases)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(knitr)
library(lubridate)
library(crosstalk)
library(scales)
setwd("D:/work/git corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$AccDay <- df$Day
df$Day <- paste(day(df$Day) , months.Date(df$Day) )
df$Curfew <- as.character(df$Curfew)
df$index <- as.numeric(rownames(df))
########################################################################
#weekly summary
AllDF <- df
shift <- 4
summary_AllDF <- data.frame(AllDF %>% mutate(week = ((as.numeric(AccDay)+shift) %/% 7) - ((as.numeric(min(AccDay))+shift) %/% 7)) %>%
group_by(week) %>%
summarise(number_of_days= table(week), from = min(AccDay) , to = max(AccDay), sum(New.Cases) , sum(New.Deaths), sum(New.Recovered)))
summary_AllDF$number_of_days <- as.integer(summary_AllDF$number_of_days)
########################################################################
df <- df[,c(1:8,12)]
attach(df)
next_day <- max(index)+1
nd_new_case <-as.integer(exp(predict(glm(Total.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_deaths <-as.integer(exp(predict(glm(New.Deaths+0.01~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_recoverd <-as.integer(exp(predict(glm(New.Recovered+0.01~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
total_cases <- df$Total.Cases[nrow(df)]
total_deaths <- df$Total.Deaths[nrow(df)]
total_recovered <- df$Total.Recovered[nrow(df)]
closed <- total_deaths+total_recovered
closed_curve <- AllDF$New.Deaths + AllDF$New.Recovered
active <- total_cases - closed
df$Day <- factor(df$Day, levels = df$Day)
xlabel <- df$Day[as.integer(seq(1 , nrow(df) , length.out = 10))]
rate_of_death <- (AllDF$Total.Deaths / (AllDF$Total.Deaths+AllDF$Total.Recovered))*100
rate_of_death <- round(rate_of_death , 2)
hk <- highlight_key(df, ~Total.Cases)
chart1 <-ggplotly(ggplot(hk, aes(x=Day, y=Total.Cases)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=Total.Cases), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_case ),
x=10,
y=max(New.Cases)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart2 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Deaths)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=New.Deaths+0.01), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_deaths ),
x=10,
y=max(New.Deaths)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart3 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Recovered)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(data = hk, aes(x=index, y=New.Recovered+0.01), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_recoverd ),
x=10,
y=max(New.Recovered)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart4 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Cases, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#33CCFF", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#33CCFF"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart5 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Deaths, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#FF9900", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#FF9900"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart6 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Recovered, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
chart10 <- ggplotly(ggplot(data=hk, aes(x=Day, y=closed_curve, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
hk2 <- highlight_key(df[15:nrow(df),], ~Total.Cases)
rate_of_death <- rate_of_death[15:nrow(df)]
chart11 <- ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
ggplotly(ggplot(hk, aes(x=Day, y=Total.Cases)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=Total.Cases), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_text(label=paste("Tomorrow's predication:",nd_new_case ),
x=10,
y=max(Total.Cases)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
nd_new_case
nd_new_case - AllDF$Total.Cases[nrow(AllDF)]
source('D:/work/git corona/run_file.R', echo=TRUE)
source('D:/work/git corona/run_file.R', echo=TRUE)
source('D:/work/git corona/run_file.R', echo=TRUE)
next_day
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
options(stringsAsFactors = FALSE)
library(ggplot2)
library(plotly)
library(flexdashboard)
library(DT)
library(plotly)
library(knitr)
library(lubridate)
library(crosstalk)
library(scales)
setwd("D:/work/git corona/")
df <- read.csv("eg_covid.csv")
df$Day <- mdy(df$Day)
df$AccDay <- df$Day
df$Day <- paste(day(df$Day) , months.Date(df$Day) )
df$Curfew <- as.character(df$Curfew)
df$index <- as.numeric(rownames(df))
########################################################################
#weekly summary
AllDF <- df
shift <- 4
summary_AllDF <- data.frame(AllDF %>% mutate(week = ((as.numeric(AccDay)+shift) %/% 7) - ((as.numeric(min(AccDay))+shift) %/% 7)) %>%
group_by(week) %>%
summarise(number_of_days= table(week), from = min(AccDay) , to = max(AccDay), sum(New.Cases) , sum(New.Deaths), sum(New.Recovered)))
summary_AllDF$number_of_days <- as.integer(summary_AllDF$number_of_days)
########################################################################
df <- df[,c(1:8,12)]
attach(df)
next_day <- max(index)+1
nd_new_case <-as.integer(exp(predict(glm(Total.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_deaths <-as.integer(exp(predict(glm(Total.Deaths~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
nd_new_recoverd <-as.integer(exp(predict(glm(Total.Recovered~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
total_cases <- df$Total.Cases[nrow(df)]
total_deaths <- df$Total.Deaths[nrow(df)]
total_recovered <- df$Total.Recovered[nrow(df)]
closed <- total_deaths+total_recovered
closed_curve <- AllDF$New.Deaths + AllDF$New.Recovered
active <- total_cases - closed
df$Day <- factor(df$Day, levels = df$Day)
xlabel <- df$Day[as.integer(seq(1 , nrow(df) , length.out = 10))]
rate_of_death <- (AllDF$Total.Deaths / (AllDF$Total.Deaths+AllDF$Total.Recovered))*100
rate_of_death <- round(rate_of_death , 2)
hk <- highlight_key(df, ~Total.Cases)
chart1 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Cases)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_text(label=paste("Tomorrow's predication:",nd_new_case - AllDF$Total.Cases[nrow(AllDF)] ),
x=10,
y=max(New.Cases)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart2 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Deaths)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_text(label=paste("Tomorrow's predication:",nd_new_deaths - AllDF$Total.Deaths[nrow(AllDF)]),
x=10,
y=max(New.Deaths)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart3 <-ggplotly(ggplot(hk, aes(x=Day, y=New.Recovered)) + scale_x_discrete(breaks = xlabel)+
geom_bar(width = 0.3, stat = "identity")+scale_fill_manual(values = c("#6698FF", "#153E7E"))+
theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_text(label=paste("Tomorrow's predication:",nd_new_recoverd - AllDF$Total.Recovered[nrow(AllDF)]),
x=10,
y=max(New.Recovered)
)
,tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart4 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Cases, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#33CCFF", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=Total.Cases), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_point(color="#33CCFF"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart5 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Deaths, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#FF9900", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(aes(x=index, y=Total.Deaths), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_point(color="#FF9900"),tooltip = c("x", "y")) %>%
highlight(off = "plotly_relayout")
chart6 <- ggplotly(ggplot(data=hk, aes(x=Day, y=Total.Recovered, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_smooth(data = hk, aes(x=index, y=Total.Recovered), method = "glm", formula = y~x,method.args = list(family = gaussian(link = 'log')))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
chart10 <- ggplotly(ggplot(data=hk, aes(x=Day, y=closed_curve, group=1))+ scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
hk2 <- highlight_key(df[15:nrow(df),], ~Total.Cases)
rate_of_death <- rate_of_death[15:nrow(df)]
chart11 <- ggplotly(ggplot(data=hk2, aes(x=Day, y=rate_of_death, group=1))+
ylab("Rate of Death (%)") +scale_x_discrete(breaks = xlabel)+
geom_line(color="#00DDDD", size=1)+theme(panel.grid.major.x  = element_blank(), axis.text.x = element_text(angle = 70, hjust = 1))+
geom_point(color="#00DDDD"),tooltip = c("x", "y"))%>%
highlight(off = "plotly_relayout")
as.integer(exp(predict(glm(Total.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))
as.integer(exp(predict(glm(Total.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day)))))-total_cases
as.integer(exp(predict(glm(Total.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day+1)))))-total_cases
as.integer(exp(predict(glm(Total.Cases~index ,family = gaussian(link = 'log') ),list(index=c(next_day+1)))))-28611
library(intallr)
library(installr)
updateR()
sessionInfo()
